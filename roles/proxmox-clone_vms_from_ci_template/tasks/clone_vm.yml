---
- name: Load SSH public key
  ansible.builtin.slurp:
    src: "{{ cloudinit.ssh_key_path | default('~/.ssh/id_rsa.pub') }}"
  register: pubkey_b64
  when:
    - cloudinit.inject_ssh_key|bool
    - cloudinit.ciuser is defined

- name: Decode SSH public key
  ansible.builtin.set_fact:
    ssh_pubkey: "{{ pubkey_b64.content | b64decode | trim }}"
  when:
    - cloudinit.inject_ssh_key|bool
    - cloudinit.ciuser is defined

- name: Get next avaliable VMID from Proxmox
  ansible.builtin.uri:
    url: "https://{{ proxmox.api_host }}:8006/api2/json/cluster/nextid"
    method: GET
    return_content: true
    validate_certs: "{{ proxmox.validate_certs }}"
    headers:
      Authorization: "PVEAPIToken={{ proxmox.api_token_id }}={{ proxmox.api_token_secret }}"
  register: nextid_resp

- name: Set chosen VMID
  ansible.builtin.set_fact:
    chosen_vmid: "{{ (nextid_resp.json.data) | int }}"

- name: Clone VM
  community.general.proxmox_kvm:
    api_host: "{{ proxmox.api_host }}"
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_user_password }}"
    api_token_id: "{{ proxmox.api_token_id }}"
    api_token_secret: "{{ proxmox.api_token_secret }}"
    node: "{{ cloudinit.node }}"
    clone: "{{ cloudinit.template_name }}"
    name: "{{ item.hostname }}"
    storage: "local-lvm"
    full: true

    
    # validate_certs: "{{ proxmox.validate_certs }}"
    # vmid: "{{ cloudinit.template_id | int  }}"
    # newid: "{{ chosen_vmid }}"
    # target: "{{ item.node }}"
    # full: true
    # cpu: "type=host"
    # scsihw: "virtio-scsi-pci"
    # machine: "q35"
    # cores: "{{ item.cores }}"
    # sockets: "{{ item.sockets }}"
    # memory: "{{ item.mem_mb }}"
    # balloon: 0
    # onboot: true
    # agent: 1
    # hotplug: "network,disk,usb"
    # scsi:
    #   scsi0: "local-lvm:{{ item.disk_gb }}{{ ',ssd=1,discard=on' if item.ssd else '' }}"
    # net:
    #   net0: "virtio,bridge=vmbr0"
    # ipconfig:
    #   ipconfig0: "{{ item.ip }}/{{ network.cidr }},gw={{ network.gateway_ip }}"
    # nameservers: "{{ network.nameservers }}"
    # searchdomains: "{{ [network.domain] if network.domain is defined else omit }}"
    # ciuser: "{{ cloudinit.ciuser }}"
    # sshkeys: "{{ ssh_pubkey }}"
    # tags: ['k3s','linux']
    # state: present
