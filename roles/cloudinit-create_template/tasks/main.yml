---
# Steps to create template
# 1. Download image
# 2. Create empty VM
# 3. Import Cloud image as Boot Disk
# 4. Attach main disk (scsi0)
# 5. Configure cloud-init settings
# 6. Convert VM to template

- name: Ensure source image exists
  ansible.builtin.stat:
    path: "/var/lib/vz/template/images/{{ cloudinit.img_name }}"
  register: img

- name: Fail if image is missing
  ansible.builtin.fail:
    msg: "Missing {{ image_dir }}/{{ image_filename }}. Run the download playbook first."
  when: not img.stat.exists

- name: Check if VMID 9000 already exists
  ansible.builtin.command: "qm status 9000"
  register: vm_status
  failed_when: false
  changed_when: false

- name: Create empty VM shell
  ansible.builtin.command: >
    qm create 9000
    --name {{ cloudinit.template_name }}
    --memory 1024 --sockets 1 --cores 1
    --machine q35 --bios ovmf --ostype l26
    --net0 virtio,bridge=vmbr0,firewall=0
    --cpu host
    --scsihw virtio-scsi-pci
    --serial0 socket
    --boot c --bootdisk scsi0
    --agent enabled=1,fstrim_cloned_disks=1
    --vga none
  when: vm_status.rc != 0

# takes a raw or QCOW2 cloud image file and imports it into the local-lvm for VM 9000
- name: Import the cloud image disk to local-lvm
  ansible.builtin.command: >
    qm importdisk 9000
    /var/lib/vz/template/images/{{ cloudinit.img_name }}
    local-lvm
  register: importdisk
  when: vm_status.rc != 0

# After qm importdisk proxmox outputs a "volid" for the imported disk. This task will parse it out and save to imported_volid.
- name: Extract imported disk volid (fallback to standard name)
  ansible.builtin.set_fact:
    imported_volid: "{{ (importdisk.stdout | regex_search(\"'(.*)'\", '\\1')) | default('local-lvm:vm-9000-disk-0', true) }}"
  when: vm_status.rc != 0

# Attaches the imported cloud image as the VM's main boot disk (scsi0)
- name: Attach imported disk as scsi0
  ansible.builtin.command: "qm set 9000 --scsi0 {{ imported_volid }}"
  when: vm_status.rc != 0

# Enables cloud-init for the VM
- name: Add cloud-init drive
  ansible.builtin.command: "qm set 9000 --ide2 local-lvm:cloudinit"
  when: vm_status.rc != 0

# Sets default cloud-init config (can replace later when cloning VM)
- name: Set some sane cloud-init defaults (DHCP + default user)
  ansible.builtin.command: "qm set 9000 --ciuser {{ cloudinit.ciuser }} --ipconfig0 ip=dhcp"
  when: vm_status.rc != 0

- name: Convert VM to a template
  ansible.builtin.command: "qm template 9000"
  when: vm_status.rc != 0

- name: Show resulting template config
  ansible.builtin.command: "qm config 9000"
  register: vm_config
  changed_when: false

- ansible.builtin.debug:
    var: vm_config.stdout
