---
# Figure out the local Proxmox node name (not the IP)
- name: Get PVE nodename via pvecm
  ansible.builtin.command: pvecm nodename
  register: pve_nodename_cmd
  failed_when: false
  changed_when: false

- name: Get PVE nodename via hostname -s (fallback)
  ansible.builtin.command: hostname -s
  register: pve_hostname_cmd
  when: pve_nodename_cmd.rc != 0
  changed_when: false

- name: Decide local PVE node name
  ansible.builtin.set_fact:
    pve_node: >-
      {{ (pve_nodename_cmd.stdout | default('') | trim)
         | default(pve_hostname_cmd.stdout | trim, true) }}

# Ensure the CI SSH key is present on this node (lookup runs on controller)
- name: Ensure /root/ci_sshkey.pub present
  ansible.builtin.copy:
    content: "{{ lookup('file', ssh_pubkey_path | default('~/.ssh/id_rsa.pub')) | trim }}"
    dest: "/root/ci_sshkey.pub"
    mode: "0600"

# Discover all VMs on this node
- name: List VMs on this node (JSON)
  ansible.builtin.command: >
    pvesh get /nodes/{{ pve_node }}/qemu --output-format json
  register: _node_vms
  changed_when: false

- name: Parse VM list
  ansible.builtin.set_fact:
    node_vm_list: "{{ _node_vms.stdout | from_json }}"

- name: Existing VM names on this node
  ansible.builtin.set_fact:
    existing_names: "{{ node_vm_list | map(attribute='name') | list }}"

# Find the local template VMID by name
- name: Determine template VMID on this node
  ansible.builtin.set_fact:
    _tmpl_vmid: >-
      {{
        (node_vm_list
          | selectattr('name','equalto', template_name | default('ubuntu-2404-cloudinit'))
          | map(attribute='vmid') | list | first) | default(None)
      }}

- name: Fail if template not found on this node
  ansible.builtin.fail:
    msg: "Template '{{ template_name | default('ubuntu-2404-cloudinit') }}' not present on node {{ pve_node }}. Run cloudinit-copy_template_to_nodes first."
  when: _tmpl_vmid is none

# Filter VMs that belong on THIS node (match by Proxmox node name)
- name: VMs for this node
  ansible.builtin.set_fact:
    vms_for_node: "{{ (vms | selectattr('node','equalto', pve_node) | list) | default([]) }}"

# Create each VM (skips if name already exists)
- name: Create VMs on this node from template
  ansible.builtin.include_tasks: create_vm.yml
  loop: "{{ vms_for_node }}"
  loop_control:
    loop_var: vm
    label: "{{ vm.hostname }}"
  when:
    - vms_for_node | length > 0
    - vm.hostname not in existing_names
