---
# Derive image filename from URL if not provided
- name: Derive image name
  ansible.builtin.set_fact:
    img_name: "{{ tmpl.img_name | default((tmpl.img_url | regex_search('[^/]+$')), true) }}"

- name: Ensure image directory exists
  ansible.builtin.file:
    path: /var/lib/vz/template/images
    state: directory
    mode: "0755"

- name: Download cloud image (if missing)
  ansible.builtin.get_url:
    url: "{{ tmpl.img_url }}"
    dest: "/var/lib/vz/template/images/{{ img_name }}"
    mode: "0644"
    force: false

# Create/ensure the VM via API (delegated to localhost)
- name: Ensure VM shell exists (API)
  delegate_to: localhost
  become: false
  community.general.proxmox_kvm:
    api_host: "{{ proxmox.api_host }}"
    api_user: "{{ proxmox.api_user | default(omit) }}"
    api_token_id: "{{ proxmox.api_token_id | default(omit) }}"
    api_token_secret: "{{ proxmox.api_token_secret | default(omit) }}"
    api_password: "{{ proxmox.api_user_password | default(omit) }}"
    validate_certs: "{{ proxmox.validate_certs | default(false) }}"
    node: "{{ tmpl.node }}"
    vmid: "{{ tmpl.vmid }}"
    name: "{{ tmpl.name }}"
    memory: "{{ tmpl.memory | default(2048) }}"
    cores: "{{ tmpl.cores | default(2) }}"
    cpu: "{{ tmpl.cpu | default('host') }}"
    scsihw: "virtio-scsi-pci"
    agent: 1
    net:
      net0: "virtio,bridge={{ tmpl.bridge | default('vmbr0') }}"
    state: present
    update: true

# Check if scsi0 is configured already (rc=1 if not found -> not a failure)
- name: Is scsi0 already defined?
  ansible.builtin.shell: "qm config {{ tmpl.vmid }} | grep -q '^scsi0:'"
  register: has_scsi0
  changed_when: false
  failed_when: false

# Import disk only when scsi0 isn't present yet
- name: Import downloaded disk into storage (once)
  ansible.builtin.command: >
    qm importdisk {{ tmpl.vmid }}
    "/var/lib/vz/template/images/{{ img_name }}"
    {{ tmpl.storage }}
  when: has_scsi0.rc != 0
  register: importdisk_out
  changed_when: true

# Find the actual imported volid for this VMID
- name: List storage content (JSON)
  ansible.builtin.command: >
    pvesh get /nodes/{{ inventory_hostname }}/storage/{{ tmpl.storage }}/content --output-format json
  register: storage_json
  changed_when: false

- name: Pick imported volid for this VMID
  ansible.builtin.set_fact:
    imported_volid: >-
      {{
        (storage_json.stdout | from_json)
        | selectattr('vmid','equalto', (tmpl.vmid|int))
        | selectattr('content','equalto','images')
        | map(attribute='volid')
        | list | first
      }}

# Attach scsi0 FIRST (API) â€” only if missing
- name: Attach scsi0 (API)
  when: has_scsi0.rc != 0 and imported_volid is defined and imported_volid | length > 0
  delegate_to: localhost
  become: false
  community.general.proxmox_kvm:
    api_host: "{{ proxmox.api_host }}"
    api_user: "{{ proxmox.api_user | default(omit) }}"
    api_token_id: "{{ proxmox.api_token_id | default(omit) }}"
    api_token_secret: "{{ proxmox.api_token_secret | default(omit) }}"
    api_password: "{{ proxmox.api_user_password | default(omit) }}"
    validate_certs: "{{ proxmox.validate_certs | default(false) }}"
    node: "{{ tmpl.node }}"
    vmid: "{{ tmpl.vmid }}"
    update: true
    scsi:
      scsi0: "{{ imported_volid }},ssd=1,discard=on,iothread=1"

# THEN set the boot order to scsi0 (safe to run always)
- name: Set boot order to scsi0 (API)
  delegate_to: localhost
  become: false
  community.general.proxmox_kvm:
    api_host: "{{ proxmox.api_host }}"
    api_user: "{{ proxmox.api_user | default(omit) }}"
    api_token_id: "{{ proxmox.api_token_id | default(omit) }}"
    api_token_secret: "{{ proxmox.api_token_secret | default(omit) }}"
    api_password: "{{ proxmox.api_user_password | default(omit) }}"
    validate_certs: "{{ proxmox.validate_certs | default(false) }}"
    node: "{{ tmpl.node }}"
    vmid: "{{ tmpl.vmid }}"
    update: true
    boot: "order=scsi0"

# Add cloud-init drive & serial console (idempotent)
- name: Add cloud-init drive (once) and enable serial console
  ansible.builtin.shell: |
    set -euo pipefail
    if ! qm config {{ tmpl.vmid }} | grep -q '^ide2: .*cloudinit'; then
      qm set {{ tmpl.vmid }} --ide2 {{ tmpl.storage }}:cloudinit
    fi
    qm set {{ tmpl.vmid }} --serial0 socket --vga serial0
  changed_when: true

# Optional defaults baked into the template (only if provided)
- name: Set cloud-init defaults (user, keys, ipconfig)
  ansible.builtin.shell: |
    set -euo pipefail
    {{ 'qm set ' ~ tmpl.vmid ~ ' --ciuser ' ~ tmpl.ciuser if (tmpl.ciuser is defined) else 'true' }}
    {{ 'qm set ' ~ tmpl.vmid ~ ' --sshkeys ' ~ tmpl.ssh_key_path if (tmpl.ssh_key_path is defined) else 'true' }}
    {{ 'qm set ' ~ tmpl.vmid ~ ' --ipconfig0 ' ~ tmpl.ipconfig0 if (tmpl.ipconfig0 is defined) else 'true' }}
  changed_when: true

# Convert to template (safe to re-run)
- name: Convert to template
  ansible.builtin.shell: |
    set -euo pipefail
    if ! qm config {{ tmpl.vmid }} | grep -q '^template: 1'; then
      qm template {{ tmpl.vmid }}
    fi
  changed_when: true
